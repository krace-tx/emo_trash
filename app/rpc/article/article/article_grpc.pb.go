//
//goctl rpc protoc article.proto --go_out=. --go-grpc_out=. --zrpc_out=. -m

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Article_CreateArticle_FullMethodName            = "/article.Article/CreateArticle"
	Article_EditArticle_FullMethodName              = "/article.Article/EditArticle"
	Article_SaveDraftArticle_FullMethodName         = "/article.Article/SaveDraftArticle"
	Article_GetDraftArticles_FullMethodName         = "/article.Article/GetDraftArticles"
	Article_DeleteArticle_FullMethodName            = "/article.Article/DeleteArticle"
	Article_GetPartitions_FullMethodName            = "/article.Article/GetPartitions"
	Article_GetArticle_FullMethodName               = "/article.Article/GetArticle"
	Article_RecommendArticles_FullMethodName        = "/article.Article/RecommendArticles"
	Article_UpdateAction_FullMethodName             = "/article.Article/UpdateAction"
	Article_CheckIfUserActionArticle_FullMethodName = "/article.Article/CheckIfUserActionArticle"
	Article_GetArticleStats_FullMethodName          = "/article.Article/GetArticleStats"
	Article_ReportArticle_FullMethodName            = "/article.Article/ReportArticle"
	Article_ShareArticle_FullMethodName             = "/article.Article/ShareArticle"
	Article_GlobalSearch_FullMethodName             = "/article.Article/GlobalSearch"
	Article_GetArticlesByUser_FullMethodName        = "/article.Article/GetArticlesByUser"
	Article_ViewHistory_FullMethodName              = "/article.Article/ViewHistory"
	Article_QueryPendingArticles_FullMethodName     = "/article.Article/QueryPendingArticles"
	Article_ReviewArticle_FullMethodName            = "/article.Article/ReviewArticle"
	Article_QueryApprovedArticles_FullMethodName    = "/article.Article/QueryApprovedArticles"
	Article_QueryRejectedArticles_FullMethodName    = "/article.Article/QueryRejectedArticles"
	Article_GetHotTopics_FullMethodName             = "/article.Article/GetHotTopics"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 文章模块接口
type ArticleClient interface {
	// 发布文章信息
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error)
	// 编辑文章信息
	EditArticle(ctx context.Context, in *EditArticleRequest, opts ...grpc.CallOption) (*EditArticleResponse, error)
	// 保存草稿
	SaveDraftArticle(ctx context.Context, in *SaveDraftArticleRequest, opts ...grpc.CallOption) (*SaveDraftArticleResponse, error)
	// 查询草稿列表
	GetDraftArticles(ctx context.Context, in *GetDraftArticlesRequest, opts ...grpc.CallOption) (*GetDraftArticlesResponse, error)
	// 删除文章信息
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
	// 查询分区
	GetPartitions(ctx context.Context, in *GetPartitionsRequest, opts ...grpc.CallOption) (*GetPartitionsResponse, error)
	// 查询文章
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error)
	// 推荐文章列表
	RecommendArticles(ctx context.Context, in *RecommendArticlesRequest, opts ...grpc.CallOption) (*RecommendArticlesResponse, error)
	// 更新活动状态
	UpdateAction(ctx context.Context, in *UpdateActionRequest, opts ...grpc.CallOption) (*UpdateActionResponse, error)
	// 查询用户是否对文章进行点赞
	CheckIfUserActionArticle(ctx context.Context, in *CheckIfUserActionArticleRequest, opts ...grpc.CallOption) (*CheckIfUserActionArticleResponse, error)
	// 获取文章统计信息
	GetArticleStats(ctx context.Context, in *GetArticleStatsRequest, opts ...grpc.CallOption) (*GetArticleStatsResponse, error)
	// 举报文章
	ReportArticle(ctx context.Context, in *ReportArticleRequest, opts ...grpc.CallOption) (*ReportArticleResponse, error)
	// 分享文章
	ShareArticle(ctx context.Context, in *ShareArticleRequest, opts ...grpc.CallOption) (*ShareArticleResponse, error)
	// 全局搜索接口
	GlobalSearch(ctx context.Context, in *GlobalSearchRequest, opts ...grpc.CallOption) (*GlobalSearchResponse, error)
	// 查看用户发布的文章列表
	GetArticlesByUser(ctx context.Context, in *GetArticlesByUserRequest, opts ...grpc.CallOption) (*GetArticlesByUserResponse, error)
	// 查询历史记录
	ViewHistory(ctx context.Context, in *ViewHistoryRequest, opts ...grpc.CallOption) (*ViewHistoryResponse, error)
	// 查询待审核的文章列表
	QueryPendingArticles(ctx context.Context, in *QueryPendingArticlesRequest, opts ...grpc.CallOption) (*QueryPendingArticlesResponse, error)
	// 审核文章（通过/未通过）
	ReviewArticle(ctx context.Context, in *ReviewArticleRequest, opts ...grpc.CallOption) (*ReviewArticleResponse, error)
	// 查询审核通过的文章列表
	QueryApprovedArticles(ctx context.Context, in *QueryApprovedArticlesRequest, opts ...grpc.CallOption) (*QueryApprovedArticlesResponse, error)
	// 查询审核未通过的文章列表
	QueryRejectedArticles(ctx context.Context, in *QueryRejectedArticlesRequest, opts ...grpc.CallOption) (*QueryRejectedArticlesResponse, error)
	// 获取热门帖子
	GetHotTopics(ctx context.Context, in *GetHotTopicsRequest, opts ...grpc.CallOption) (*GetHotTopicsResponse, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateArticleResponse)
	err := c.cc.Invoke(ctx, Article_CreateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) EditArticle(ctx context.Context, in *EditArticleRequest, opts ...grpc.CallOption) (*EditArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditArticleResponse)
	err := c.cc.Invoke(ctx, Article_EditArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SaveDraftArticle(ctx context.Context, in *SaveDraftArticleRequest, opts ...grpc.CallOption) (*SaveDraftArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveDraftArticleResponse)
	err := c.cc.Invoke(ctx, Article_SaveDraftArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetDraftArticles(ctx context.Context, in *GetDraftArticlesRequest, opts ...grpc.CallOption) (*GetDraftArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDraftArticlesResponse)
	err := c.cc.Invoke(ctx, Article_GetDraftArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleResponse)
	err := c.cc.Invoke(ctx, Article_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetPartitions(ctx context.Context, in *GetPartitionsRequest, opts ...grpc.CallOption) (*GetPartitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartitionsResponse)
	err := c.cc.Invoke(ctx, Article_GetPartitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleResponse)
	err := c.cc.Invoke(ctx, Article_GetArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) RecommendArticles(ctx context.Context, in *RecommendArticlesRequest, opts ...grpc.CallOption) (*RecommendArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendArticlesResponse)
	err := c.cc.Invoke(ctx, Article_RecommendArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateAction(ctx context.Context, in *UpdateActionRequest, opts ...grpc.CallOption) (*UpdateActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateActionResponse)
	err := c.cc.Invoke(ctx, Article_UpdateAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CheckIfUserActionArticle(ctx context.Context, in *CheckIfUserActionArticleRequest, opts ...grpc.CallOption) (*CheckIfUserActionArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIfUserActionArticleResponse)
	err := c.cc.Invoke(ctx, Article_CheckIfUserActionArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticleStats(ctx context.Context, in *GetArticleStatsRequest, opts ...grpc.CallOption) (*GetArticleStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleStatsResponse)
	err := c.cc.Invoke(ctx, Article_GetArticleStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ReportArticle(ctx context.Context, in *ReportArticleRequest, opts ...grpc.CallOption) (*ReportArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportArticleResponse)
	err := c.cc.Invoke(ctx, Article_ReportArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ShareArticle(ctx context.Context, in *ShareArticleRequest, opts ...grpc.CallOption) (*ShareArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareArticleResponse)
	err := c.cc.Invoke(ctx, Article_ShareArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GlobalSearch(ctx context.Context, in *GlobalSearchRequest, opts ...grpc.CallOption) (*GlobalSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalSearchResponse)
	err := c.cc.Invoke(ctx, Article_GlobalSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetArticlesByUser(ctx context.Context, in *GetArticlesByUserRequest, opts ...grpc.CallOption) (*GetArticlesByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticlesByUserResponse)
	err := c.cc.Invoke(ctx, Article_GetArticlesByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ViewHistory(ctx context.Context, in *ViewHistoryRequest, opts ...grpc.CallOption) (*ViewHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewHistoryResponse)
	err := c.cc.Invoke(ctx, Article_ViewHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) QueryPendingArticles(ctx context.Context, in *QueryPendingArticlesRequest, opts ...grpc.CallOption) (*QueryPendingArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPendingArticlesResponse)
	err := c.cc.Invoke(ctx, Article_QueryPendingArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ReviewArticle(ctx context.Context, in *ReviewArticleRequest, opts ...grpc.CallOption) (*ReviewArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewArticleResponse)
	err := c.cc.Invoke(ctx, Article_ReviewArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) QueryApprovedArticles(ctx context.Context, in *QueryApprovedArticlesRequest, opts ...grpc.CallOption) (*QueryApprovedArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryApprovedArticlesResponse)
	err := c.cc.Invoke(ctx, Article_QueryApprovedArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) QueryRejectedArticles(ctx context.Context, in *QueryRejectedArticlesRequest, opts ...grpc.CallOption) (*QueryRejectedArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRejectedArticlesResponse)
	err := c.cc.Invoke(ctx, Article_QueryRejectedArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetHotTopics(ctx context.Context, in *GetHotTopicsRequest, opts ...grpc.CallOption) (*GetHotTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotTopicsResponse)
	err := c.cc.Invoke(ctx, Article_GetHotTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility.
//
// 文章模块接口
type ArticleServer interface {
	// 发布文章信息
	CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error)
	// 编辑文章信息
	EditArticle(context.Context, *EditArticleRequest) (*EditArticleResponse, error)
	// 保存草稿
	SaveDraftArticle(context.Context, *SaveDraftArticleRequest) (*SaveDraftArticleResponse, error)
	// 查询草稿列表
	GetDraftArticles(context.Context, *GetDraftArticlesRequest) (*GetDraftArticlesResponse, error)
	// 删除文章信息
	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error)
	// 查询分区
	GetPartitions(context.Context, *GetPartitionsRequest) (*GetPartitionsResponse, error)
	// 查询文章
	GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error)
	// 推荐文章列表
	RecommendArticles(context.Context, *RecommendArticlesRequest) (*RecommendArticlesResponse, error)
	// 更新活动状态
	UpdateAction(context.Context, *UpdateActionRequest) (*UpdateActionResponse, error)
	// 查询用户是否对文章进行点赞
	CheckIfUserActionArticle(context.Context, *CheckIfUserActionArticleRequest) (*CheckIfUserActionArticleResponse, error)
	// 获取文章统计信息
	GetArticleStats(context.Context, *GetArticleStatsRequest) (*GetArticleStatsResponse, error)
	// 举报文章
	ReportArticle(context.Context, *ReportArticleRequest) (*ReportArticleResponse, error)
	// 分享文章
	ShareArticle(context.Context, *ShareArticleRequest) (*ShareArticleResponse, error)
	// 全局搜索接口
	GlobalSearch(context.Context, *GlobalSearchRequest) (*GlobalSearchResponse, error)
	// 查看用户发布的文章列表
	GetArticlesByUser(context.Context, *GetArticlesByUserRequest) (*GetArticlesByUserResponse, error)
	// 查询历史记录
	ViewHistory(context.Context, *ViewHistoryRequest) (*ViewHistoryResponse, error)
	// 查询待审核的文章列表
	QueryPendingArticles(context.Context, *QueryPendingArticlesRequest) (*QueryPendingArticlesResponse, error)
	// 审核文章（通过/未通过）
	ReviewArticle(context.Context, *ReviewArticleRequest) (*ReviewArticleResponse, error)
	// 查询审核通过的文章列表
	QueryApprovedArticles(context.Context, *QueryApprovedArticlesRequest) (*QueryApprovedArticlesResponse, error)
	// 查询审核未通过的文章列表
	QueryRejectedArticles(context.Context, *QueryRejectedArticlesRequest) (*QueryRejectedArticlesResponse, error)
	// 获取热门帖子
	GetHotTopics(context.Context, *GetHotTopicsRequest) (*GetHotTopicsResponse, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServer struct{}

func (UnimplementedArticleServer) CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleServer) EditArticle(context.Context, *EditArticleRequest) (*EditArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditArticle not implemented")
}
func (UnimplementedArticleServer) SaveDraftArticle(context.Context, *SaveDraftArticleRequest) (*SaveDraftArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDraftArticle not implemented")
}
func (UnimplementedArticleServer) GetDraftArticles(context.Context, *GetDraftArticlesRequest) (*GetDraftArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftArticles not implemented")
}
func (UnimplementedArticleServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleServer) GetPartitions(context.Context, *GetPartitionsRequest) (*GetPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitions not implemented")
}
func (UnimplementedArticleServer) GetArticle(context.Context, *GetArticleRequest) (*GetArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleServer) RecommendArticles(context.Context, *RecommendArticlesRequest) (*RecommendArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendArticles not implemented")
}
func (UnimplementedArticleServer) UpdateAction(context.Context, *UpdateActionRequest) (*UpdateActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAction not implemented")
}
func (UnimplementedArticleServer) CheckIfUserActionArticle(context.Context, *CheckIfUserActionArticleRequest) (*CheckIfUserActionArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserActionArticle not implemented")
}
func (UnimplementedArticleServer) GetArticleStats(context.Context, *GetArticleStatsRequest) (*GetArticleStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleStats not implemented")
}
func (UnimplementedArticleServer) ReportArticle(context.Context, *ReportArticleRequest) (*ReportArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportArticle not implemented")
}
func (UnimplementedArticleServer) ShareArticle(context.Context, *ShareArticleRequest) (*ShareArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareArticle not implemented")
}
func (UnimplementedArticleServer) GlobalSearch(context.Context, *GlobalSearchRequest) (*GlobalSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalSearch not implemented")
}
func (UnimplementedArticleServer) GetArticlesByUser(context.Context, *GetArticlesByUserRequest) (*GetArticlesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlesByUser not implemented")
}
func (UnimplementedArticleServer) ViewHistory(context.Context, *ViewHistoryRequest) (*ViewHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewHistory not implemented")
}
func (UnimplementedArticleServer) QueryPendingArticles(context.Context, *QueryPendingArticlesRequest) (*QueryPendingArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingArticles not implemented")
}
func (UnimplementedArticleServer) ReviewArticle(context.Context, *ReviewArticleRequest) (*ReviewArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewArticle not implemented")
}
func (UnimplementedArticleServer) QueryApprovedArticles(context.Context, *QueryApprovedArticlesRequest) (*QueryApprovedArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApprovedArticles not implemented")
}
func (UnimplementedArticleServer) QueryRejectedArticles(context.Context, *QueryRejectedArticlesRequest) (*QueryRejectedArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRejectedArticles not implemented")
}
func (UnimplementedArticleServer) GetHotTopics(context.Context, *GetHotTopicsRequest) (*GetHotTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotTopics not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}
func (UnimplementedArticleServer) testEmbeddedByValue()                 {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	// If the following call pancis, it indicates UnimplementedArticleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_EditArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).EditArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_EditArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).EditArticle(ctx, req.(*EditArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SaveDraftArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDraftArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SaveDraftArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_SaveDraftArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SaveDraftArticle(ctx, req.(*SaveDraftArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetDraftArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetDraftArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetDraftArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetDraftArticles(ctx, req.(*GetDraftArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetPartitions(ctx, req.(*GetPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_RecommendArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).RecommendArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_RecommendArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).RecommendArticles(ctx, req.(*RecommendArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_UpdateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateAction(ctx, req.(*UpdateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CheckIfUserActionArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfUserActionArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CheckIfUserActionArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_CheckIfUserActionArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CheckIfUserActionArticle(ctx, req.(*CheckIfUserActionArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticleStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleStats(ctx, req.(*GetArticleStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ReportArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ReportArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ReportArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ReportArticle(ctx, req.(*ReportArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ShareArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ShareArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ShareArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ShareArticle(ctx, req.(*ShareArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GlobalSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GlobalSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GlobalSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GlobalSearch(ctx, req.(*GlobalSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetArticlesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticlesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetArticlesByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticlesByUser(ctx, req.(*GetArticlesByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ViewHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ViewHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ViewHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ViewHistory(ctx, req.(*ViewHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_QueryPendingArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).QueryPendingArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_QueryPendingArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).QueryPendingArticles(ctx, req.(*QueryPendingArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ReviewArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ReviewArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ReviewArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ReviewArticle(ctx, req.(*ReviewArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_QueryApprovedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApprovedArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).QueryApprovedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_QueryApprovedArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).QueryApprovedArticles(ctx, req.(*QueryApprovedArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_QueryRejectedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRejectedArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).QueryRejectedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_QueryRejectedArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).QueryRejectedArticles(ctx, req.(*QueryRejectedArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetHotTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetHotTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetHotTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetHotTopics(ctx, req.(*GetHotTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _Article_CreateArticle_Handler,
		},
		{
			MethodName: "EditArticle",
			Handler:    _Article_EditArticle_Handler,
		},
		{
			MethodName: "SaveDraftArticle",
			Handler:    _Article_SaveDraftArticle_Handler,
		},
		{
			MethodName: "GetDraftArticles",
			Handler:    _Article_GetDraftArticles_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Article_DeleteArticle_Handler,
		},
		{
			MethodName: "GetPartitions",
			Handler:    _Article_GetPartitions_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _Article_GetArticle_Handler,
		},
		{
			MethodName: "RecommendArticles",
			Handler:    _Article_RecommendArticles_Handler,
		},
		{
			MethodName: "UpdateAction",
			Handler:    _Article_UpdateAction_Handler,
		},
		{
			MethodName: "CheckIfUserActionArticle",
			Handler:    _Article_CheckIfUserActionArticle_Handler,
		},
		{
			MethodName: "GetArticleStats",
			Handler:    _Article_GetArticleStats_Handler,
		},
		{
			MethodName: "ReportArticle",
			Handler:    _Article_ReportArticle_Handler,
		},
		{
			MethodName: "ShareArticle",
			Handler:    _Article_ShareArticle_Handler,
		},
		{
			MethodName: "GlobalSearch",
			Handler:    _Article_GlobalSearch_Handler,
		},
		{
			MethodName: "GetArticlesByUser",
			Handler:    _Article_GetArticlesByUser_Handler,
		},
		{
			MethodName: "ViewHistory",
			Handler:    _Article_ViewHistory_Handler,
		},
		{
			MethodName: "QueryPendingArticles",
			Handler:    _Article_QueryPendingArticles_Handler,
		},
		{
			MethodName: "ReviewArticle",
			Handler:    _Article_ReviewArticle_Handler,
		},
		{
			MethodName: "QueryApprovedArticles",
			Handler:    _Article_QueryApprovedArticles_Handler,
		},
		{
			MethodName: "QueryRejectedArticles",
			Handler:    _Article_QueryRejectedArticles_Handler,
		},
		{
			MethodName: "GetHotTopics",
			Handler:    _Article_GetHotTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}

const (
	Comment_GetCommentList_FullMethodName          = "/article.Comment/GetCommentList"
	Comment_GetReplyComment_FullMethodName         = "/article.Comment/GetReplyComment"
	Comment_CreateComment_FullMethodName           = "/article.Comment/CreateComment"
	Comment_ReplyComment_FullMethodName            = "/article.Comment/ReplyComment"
	Comment_LikeComment_FullMethodName             = "/article.Comment/LikeComment"
	Comment_GetCommentLeafCount_FullMethodName     = "/article.Comment/GetCommentLeafCount"
	Comment_GetLikeCommentCount_FullMethodName     = "/article.Comment/GetLikeCommentCount"
	Comment_CheckIfUserLikedComment_FullMethodName = "/article.Comment/CheckIfUserLikedComment"
)

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 评论管理服务接口
type CommentClient interface {
	// 获取楼主评论
	GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error)
	// 获取回复评论
	GetReplyComment(ctx context.Context, in *GetReplyCommentRequest, opts ...grpc.CallOption) (*GetReplyCommentResponse, error)
	// 发布评论信息
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	// 回复评论信息
	ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentResponse, error)
	// 点赞/取消点赞评论
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error)
	// 获取叶子节点的数量
	GetCommentLeafCount(ctx context.Context, in *GetCommentLeafCountRequest, opts ...grpc.CallOption) (*GetCommentLeafCountResponse, error)
	// 获取评论点赞的数量
	GetLikeCommentCount(ctx context.Context, in *GetLikeCommentCountRequest, opts ...grpc.CallOption) (*GetLikeCommentCountResponse, error)
	CheckIfUserLikedComment(ctx context.Context, in *CheckIfUserLikedCommentRequest, opts ...grpc.CallOption) (*CheckIfUserLikedCommentResponse, error)
}

type commentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClient(cc grpc.ClientConnInterface) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...grpc.CallOption) (*GetCommentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentListResponse)
	err := c.cc.Invoke(ctx, Comment_GetCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetReplyComment(ctx context.Context, in *GetReplyCommentRequest, opts ...grpc.CallOption) (*GetReplyCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReplyCommentResponse)
	err := c.cc.Invoke(ctx, Comment_GetReplyComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, Comment_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyCommentResponse)
	err := c.cc.Invoke(ctx, Comment_ReplyComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCommentResponse)
	err := c.cc.Invoke(ctx, Comment_LikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentLeafCount(ctx context.Context, in *GetCommentLeafCountRequest, opts ...grpc.CallOption) (*GetCommentLeafCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentLeafCountResponse)
	err := c.cc.Invoke(ctx, Comment_GetCommentLeafCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetLikeCommentCount(ctx context.Context, in *GetLikeCommentCountRequest, opts ...grpc.CallOption) (*GetLikeCommentCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikeCommentCountResponse)
	err := c.cc.Invoke(ctx, Comment_GetLikeCommentCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CheckIfUserLikedComment(ctx context.Context, in *CheckIfUserLikedCommentRequest, opts ...grpc.CallOption) (*CheckIfUserLikedCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIfUserLikedCommentResponse)
	err := c.cc.Invoke(ctx, Comment_CheckIfUserLikedComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServer is the server API for Comment service.
// All implementations must embed UnimplementedCommentServer
// for forward compatibility.
//
// 评论管理服务接口
type CommentServer interface {
	// 获取楼主评论
	GetCommentList(context.Context, *GetCommentListRequest) (*GetCommentListResponse, error)
	// 获取回复评论
	GetReplyComment(context.Context, *GetReplyCommentRequest) (*GetReplyCommentResponse, error)
	// 发布评论信息
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	// 回复评论信息
	ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentResponse, error)
	// 点赞/取消点赞评论
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error)
	// 获取叶子节点的数量
	GetCommentLeafCount(context.Context, *GetCommentLeafCountRequest) (*GetCommentLeafCountResponse, error)
	// 获取评论点赞的数量
	GetLikeCommentCount(context.Context, *GetLikeCommentCountRequest) (*GetLikeCommentCountResponse, error)
	CheckIfUserLikedComment(context.Context, *CheckIfUserLikedCommentRequest) (*CheckIfUserLikedCommentResponse, error)
	mustEmbedUnimplementedCommentServer()
}

// UnimplementedCommentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServer struct{}

func (UnimplementedCommentServer) GetCommentList(context.Context, *GetCommentListRequest) (*GetCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedCommentServer) GetReplyComment(context.Context, *GetReplyCommentRequest) (*GetReplyCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyComment not implemented")
}
func (UnimplementedCommentServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServer) ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedCommentServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedCommentServer) GetCommentLeafCount(context.Context, *GetCommentLeafCountRequest) (*GetCommentLeafCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentLeafCount not implemented")
}
func (UnimplementedCommentServer) GetLikeCommentCount(context.Context, *GetLikeCommentCountRequest) (*GetLikeCommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeCommentCount not implemented")
}
func (UnimplementedCommentServer) CheckIfUserLikedComment(context.Context, *CheckIfUserLikedCommentRequest) (*CheckIfUserLikedCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserLikedComment not implemented")
}
func (UnimplementedCommentServer) mustEmbedUnimplementedCommentServer() {}
func (UnimplementedCommentServer) testEmbeddedByValue()                 {}

// UnsafeCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServer will
// result in compilation errors.
type UnsafeCommentServer interface {
	mustEmbedUnimplementedCommentServer()
}

func RegisterCommentServer(s grpc.ServiceRegistrar, srv CommentServer) {
	// If the following call pancis, it indicates UnimplementedCommentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Comment_ServiceDesc, srv)
}

func _Comment_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentList(ctx, req.(*GetCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_GetReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetReplyComment(ctx, req.(*GetReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_ReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).ReplyComment(ctx, req.(*ReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentLeafCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentLeafCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentLeafCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_GetCommentLeafCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentLeafCount(ctx, req.(*GetCommentLeafCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetLikeCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeCommentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetLikeCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_GetLikeCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetLikeCommentCount(ctx, req.(*GetLikeCommentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CheckIfUserLikedComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfUserLikedCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CheckIfUserLikedComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comment_CheckIfUserLikedComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CheckIfUserLikedComment(ctx, req.(*CheckIfUserLikedCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comment_ServiceDesc is the grpc.ServiceDesc for Comment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentList",
			Handler:    _Comment_GetCommentList_Handler,
		},
		{
			MethodName: "GetReplyComment",
			Handler:    _Comment_GetReplyComment_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Comment_CreateComment_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _Comment_ReplyComment_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _Comment_LikeComment_Handler,
		},
		{
			MethodName: "GetCommentLeafCount",
			Handler:    _Comment_GetCommentLeafCount_Handler,
		},
		{
			MethodName: "GetLikeCommentCount",
			Handler:    _Comment_GetLikeCommentCount_Handler,
		},
		{
			MethodName: "CheckIfUserLikedComment",
			Handler:    _Comment_CheckIfUserLikedComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}

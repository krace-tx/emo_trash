// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: article.proto

package server

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/article/article"
	"github.com/krace-tx/emo_trash/app/rpc/article/internal/logic/comment"
	"github.com/krace-tx/emo_trash/app/rpc/article/internal/svc"
)

type CommentServer struct {
	svcCtx *svc.ServiceContext
	article.UnimplementedCommentServer
}

func NewCommentServer(svcCtx *svc.ServiceContext) *CommentServer {
	return &CommentServer{
		svcCtx: svcCtx,
	}
}

// 获取楼主评论
func (s *CommentServer) GetCommentList(ctx context.Context, in *article.GetCommentListRequest) (*article.GetCommentListResponse, error) {
	l := commentlogic.NewGetCommentListLogic(ctx, s.svcCtx)
	return l.GetCommentList(in)
}

// 获取回复评论
func (s *CommentServer) GetReplyComment(ctx context.Context, in *article.GetReplyCommentRequest) (*article.GetReplyCommentResponse, error) {
	l := commentlogic.NewGetReplyCommentLogic(ctx, s.svcCtx)
	return l.GetReplyComment(in)
}

// 发布评论信息
func (s *CommentServer) CreateComment(ctx context.Context, in *article.CreateCommentRequest) (*article.CreateCommentResponse, error) {
	l := commentlogic.NewCreateCommentLogic(ctx, s.svcCtx)
	return l.CreateComment(in)
}

// 回复评论信息
func (s *CommentServer) ReplyComment(ctx context.Context, in *article.ReplyCommentRequest) (*article.ReplyCommentResponse, error) {
	l := commentlogic.NewReplyCommentLogic(ctx, s.svcCtx)
	return l.ReplyComment(in)
}

// 点赞/取消点赞评论
func (s *CommentServer) LikeComment(ctx context.Context, in *article.LikeCommentRequest) (*article.LikeCommentResponse, error) {
	l := commentlogic.NewLikeCommentLogic(ctx, s.svcCtx)
	return l.LikeComment(in)
}

// 获取叶子节点的数量
func (s *CommentServer) GetCommentLeafCount(ctx context.Context, in *article.GetCommentLeafCountRequest) (*article.GetCommentLeafCountResponse, error) {
	l := commentlogic.NewGetCommentLeafCountLogic(ctx, s.svcCtx)
	return l.GetCommentLeafCount(in)
}

// 获取评论点赞的数量
func (s *CommentServer) GetLikeCommentCount(ctx context.Context, in *article.GetLikeCommentCountRequest) (*article.GetLikeCommentCountResponse, error) {
	l := commentlogic.NewGetLikeCommentCountLogic(ctx, s.svcCtx)
	return l.GetLikeCommentCount(in)
}

func (s *CommentServer) CheckIfUserLikedComment(ctx context.Context, in *article.CheckIfUserLikedCommentRequest) (*article.CheckIfUserLikedCommentResponse, error) {
	l := commentlogic.NewCheckIfUserLikedCommentLogic(ctx, s.svcCtx)
	return l.CheckIfUserLikedComment(in)
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: article.proto

package server

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/article/article"
	"github.com/krace-tx/emo_trash/app/rpc/article/internal/logic/article"
	"github.com/krace-tx/emo_trash/app/rpc/article/internal/svc"
)

type ArticleServer struct {
	svcCtx *svc.ServiceContext
	article.UnimplementedArticleServer
}

func NewArticleServer(svcCtx *svc.ServiceContext) *ArticleServer {
	return &ArticleServer{
		svcCtx: svcCtx,
	}
}

// 发布文章信息
func (s *ArticleServer) CreateArticle(ctx context.Context, in *article.CreateArticleRequest) (*article.CreateArticleResponse, error) {
	l := articlelogic.NewCreateArticleLogic(ctx, s.svcCtx)
	return l.CreateArticle(in)
}

// 编辑文章信息
func (s *ArticleServer) EditArticle(ctx context.Context, in *article.EditArticleRequest) (*article.EditArticleResponse, error) {
	l := articlelogic.NewEditArticleLogic(ctx, s.svcCtx)
	return l.EditArticle(in)
}

// 保存草稿
func (s *ArticleServer) SaveDraftArticle(ctx context.Context, in *article.SaveDraftArticleRequest) (*article.SaveDraftArticleResponse, error) {
	l := articlelogic.NewSaveDraftArticleLogic(ctx, s.svcCtx)
	return l.SaveDraftArticle(in)
}

// 查询草稿列表
func (s *ArticleServer) GetDraftArticles(ctx context.Context, in *article.GetDraftArticlesRequest) (*article.GetDraftArticlesResponse, error) {
	l := articlelogic.NewGetDraftArticlesLogic(ctx, s.svcCtx)
	return l.GetDraftArticles(in)
}

// 删除文章信息
func (s *ArticleServer) DeleteArticle(ctx context.Context, in *article.DeleteArticleRequest) (*article.DeleteArticleResponse, error) {
	l := articlelogic.NewDeleteArticleLogic(ctx, s.svcCtx)
	return l.DeleteArticle(in)
}

// 查询分区
func (s *ArticleServer) GetPartitions(ctx context.Context, in *article.GetPartitionsRequest) (*article.GetPartitionsResponse, error) {
	l := articlelogic.NewGetPartitionsLogic(ctx, s.svcCtx)
	return l.GetPartitions(in)
}

// 查询文章
func (s *ArticleServer) GetArticle(ctx context.Context, in *article.GetArticleRequest) (*article.GetArticleResponse, error) {
	l := articlelogic.NewGetArticleLogic(ctx, s.svcCtx)
	return l.GetArticle(in)
}

// 推荐文章列表
func (s *ArticleServer) RecommendArticles(ctx context.Context, in *article.RecommendArticlesRequest) (*article.RecommendArticlesResponse, error) {
	l := articlelogic.NewRecommendArticlesLogic(ctx, s.svcCtx)
	return l.RecommendArticles(in)
}

// 更新活动状态
func (s *ArticleServer) UpdateAction(ctx context.Context, in *article.UpdateActionRequest) (*article.UpdateActionResponse, error) {
	l := articlelogic.NewUpdateActionLogic(ctx, s.svcCtx)
	return l.UpdateAction(in)
}

// 查询用户是否对文章进行点赞
func (s *ArticleServer) CheckIfUserActionArticle(ctx context.Context, in *article.CheckIfUserActionArticleRequest) (*article.CheckIfUserActionArticleResponse, error) {
	l := articlelogic.NewCheckIfUserActionArticleLogic(ctx, s.svcCtx)
	return l.CheckIfUserActionArticle(in)
}

// 获取文章统计信息
func (s *ArticleServer) GetArticleStats(ctx context.Context, in *article.GetArticleStatsRequest) (*article.GetArticleStatsResponse, error) {
	l := articlelogic.NewGetArticleStatsLogic(ctx, s.svcCtx)
	return l.GetArticleStats(in)
}

// 举报文章
func (s *ArticleServer) ReportArticle(ctx context.Context, in *article.ReportArticleRequest) (*article.ReportArticleResponse, error) {
	l := articlelogic.NewReportArticleLogic(ctx, s.svcCtx)
	return l.ReportArticle(in)
}

// 分享文章
func (s *ArticleServer) ShareArticle(ctx context.Context, in *article.ShareArticleRequest) (*article.ShareArticleResponse, error) {
	l := articlelogic.NewShareArticleLogic(ctx, s.svcCtx)
	return l.ShareArticle(in)
}

// 全局搜索接口
func (s *ArticleServer) GlobalSearch(ctx context.Context, in *article.GlobalSearchRequest) (*article.GlobalSearchResponse, error) {
	l := articlelogic.NewGlobalSearchLogic(ctx, s.svcCtx)
	return l.GlobalSearch(in)
}

// 查看用户发布的文章列表
func (s *ArticleServer) GetArticlesByUser(ctx context.Context, in *article.GetArticlesByUserRequest) (*article.GetArticlesByUserResponse, error) {
	l := articlelogic.NewGetArticlesByUserLogic(ctx, s.svcCtx)
	return l.GetArticlesByUser(in)
}

// 查询历史记录
func (s *ArticleServer) ViewHistory(ctx context.Context, in *article.ViewHistoryRequest) (*article.ViewHistoryResponse, error) {
	l := articlelogic.NewViewHistoryLogic(ctx, s.svcCtx)
	return l.ViewHistory(in)
}

// 查询待审核的文章列表
func (s *ArticleServer) QueryPendingArticles(ctx context.Context, in *article.QueryPendingArticlesRequest) (*article.QueryPendingArticlesResponse, error) {
	l := articlelogic.NewQueryPendingArticlesLogic(ctx, s.svcCtx)
	return l.QueryPendingArticles(in)
}

// 审核文章（通过/未通过）
func (s *ArticleServer) ReviewArticle(ctx context.Context, in *article.ReviewArticleRequest) (*article.ReviewArticleResponse, error) {
	l := articlelogic.NewReviewArticleLogic(ctx, s.svcCtx)
	return l.ReviewArticle(in)
}

// 查询审核通过的文章列表
func (s *ArticleServer) QueryApprovedArticles(ctx context.Context, in *article.QueryApprovedArticlesRequest) (*article.QueryApprovedArticlesResponse, error) {
	l := articlelogic.NewQueryApprovedArticlesLogic(ctx, s.svcCtx)
	return l.QueryApprovedArticles(in)
}

// 查询审核未通过的文章列表
func (s *ArticleServer) QueryRejectedArticles(ctx context.Context, in *article.QueryRejectedArticlesRequest) (*article.QueryRejectedArticlesResponse, error) {
	l := articlelogic.NewQueryRejectedArticlesLogic(ctx, s.svcCtx)
	return l.QueryRejectedArticles(in)
}

// 获取热门帖子
func (s *ArticleServer) GetHotTopics(ctx context.Context, in *article.GetHotTopicsRequest) (*article.GetHotTopicsResponse, error) {
	l := articlelogic.NewGetHotTopicsLogic(ctx, s.svcCtx)
	return l.GetHotTopics(in)
}

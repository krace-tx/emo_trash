// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: notification.proto

package server

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/notification/internal/logic/notification"
	"github.com/krace-tx/emo_trash/app/rpc/notification/internal/svc"
	"github.com/krace-tx/emo_trash/app/rpc/notification/notification"
)

type NotificationServer struct {
	svcCtx *svc.ServiceContext
	notification.UnimplementedNotificationServer
}

func NewNotificationServer(svcCtx *svc.ServiceContext) *NotificationServer {
	return &NotificationServer{
		svcCtx: svcCtx,
	}
}

// 获取用户的通知列表
func (s *NotificationServer) GetNotificationList(ctx context.Context, in *notification.GetNotificationListRequest) (*notification.GetNotificationListResponse, error) {
	l := notificationlogic.NewGetNotificationListLogic(ctx, s.svcCtx)
	return l.GetNotificationList(in)
}

// 标记通知为已读
func (s *NotificationServer) MarkNotificationAsRead(ctx context.Context, in *notification.MarkNotificationAsReadRequest) (*notification.MarkNotificationAsReadResponse, error) {
	l := notificationlogic.NewMarkNotificationAsReadLogic(ctx, s.svcCtx)
	return l.MarkNotificationAsRead(in)
}

// 标记所有通知为已读
func (s *NotificationServer) MarkAllNotificationsAsRead(ctx context.Context, in *notification.MarkAllNotificationsAsReadRequest) (*notification.MarkAllNotificationsAsReadResponse, error) {
	l := notificationlogic.NewMarkAllNotificationsAsReadLogic(ctx, s.svcCtx)
	return l.MarkAllNotificationsAsRead(in)
}

// 删除通知
func (s *NotificationServer) DeleteNotification(ctx context.Context, in *notification.DeleteNotificationRequest) (*notification.DeleteNotificationResponse, error) {
	l := notificationlogic.NewDeleteNotificationLogic(ctx, s.svcCtx)
	return l.DeleteNotification(in)
}

// 删除所有通知
func (s *NotificationServer) DeleteAllNotifications(ctx context.Context, in *notification.DeleteAllNotificationsRequest) (*notification.DeleteAllNotificationsResponse, error) {
	l := notificationlogic.NewDeleteAllNotificationsLogic(ctx, s.svcCtx)
	return l.DeleteAllNotifications(in)
}

// 推送通知
func (s *NotificationServer) PushNotification(ctx context.Context, in *notification.PushNotificationRequest) (*notification.PushNotificationResponse, error) {
	l := notificationlogic.NewPushNotificationLogic(ctx, s.svcCtx)
	return l.PushNotification(in)
}

// 获取未读通知数量
func (s *NotificationServer) GetUnreadNotificationCount(ctx context.Context, in *notification.GetUnreadNotificationCountRequest) (*notification.GetUnreadNotificationCountResponse, error) {
	l := notificationlogic.NewGetUnreadNotificationCountLogic(ctx, s.svcCtx)
	return l.GetUnreadNotificationCount(in)
}

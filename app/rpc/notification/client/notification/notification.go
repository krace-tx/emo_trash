// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: notification.proto

package notification

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/notification/notification"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteAllNotificationsRequest      = notification.DeleteAllNotificationsRequest
	DeleteAllNotificationsResponse     = notification.DeleteAllNotificationsResponse
	DeleteNotificationRequest          = notification.DeleteNotificationRequest
	DeleteNotificationResponse         = notification.DeleteNotificationResponse
	GetNotificationListRequest         = notification.GetNotificationListRequest
	GetNotificationListResponse        = notification.GetNotificationListResponse
	GetUnreadNotificationCountRequest  = notification.GetUnreadNotificationCountRequest
	GetUnreadNotificationCountResponse = notification.GetUnreadNotificationCountResponse
	MarkAllNotificationsAsReadRequest  = notification.MarkAllNotificationsAsReadRequest
	MarkAllNotificationsAsReadResponse = notification.MarkAllNotificationsAsReadResponse
	MarkNotificationAsReadRequest      = notification.MarkNotificationAsReadRequest
	MarkNotificationAsReadResponse     = notification.MarkNotificationAsReadResponse
	Notify                             = notification.Notify
	PushNotificationRequest            = notification.PushNotificationRequest
	PushNotificationResponse           = notification.PushNotificationResponse

	Notification interface {
		// 获取用户的通知列表
		GetNotificationList(ctx context.Context, in *GetNotificationListRequest, opts ...grpc.CallOption) (*GetNotificationListResponse, error)
		// 标记通知为已读
		MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error)
		// 标记所有通知为已读
		MarkAllNotificationsAsRead(ctx context.Context, in *MarkAllNotificationsAsReadRequest, opts ...grpc.CallOption) (*MarkAllNotificationsAsReadResponse, error)
		// 删除通知
		DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error)
		// 删除所有通知
		DeleteAllNotifications(ctx context.Context, in *DeleteAllNotificationsRequest, opts ...grpc.CallOption) (*DeleteAllNotificationsResponse, error)
		// 推送通知
		PushNotification(ctx context.Context, in *PushNotificationRequest, opts ...grpc.CallOption) (*PushNotificationResponse, error)
		// 获取未读通知数量
		GetUnreadNotificationCount(ctx context.Context, in *GetUnreadNotificationCountRequest, opts ...grpc.CallOption) (*GetUnreadNotificationCountResponse, error)
	}

	defaultNotification struct {
		cli zrpc.Client
	}
)

func NewNotification(cli zrpc.Client) Notification {
	return &defaultNotification{
		cli: cli,
	}
}

// 获取用户的通知列表
func (m *defaultNotification) GetNotificationList(ctx context.Context, in *GetNotificationListRequest, opts ...grpc.CallOption) (*GetNotificationListResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.GetNotificationList(ctx, in, opts...)
}

// 标记通知为已读
func (m *defaultNotification) MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.MarkNotificationAsRead(ctx, in, opts...)
}

// 标记所有通知为已读
func (m *defaultNotification) MarkAllNotificationsAsRead(ctx context.Context, in *MarkAllNotificationsAsReadRequest, opts ...grpc.CallOption) (*MarkAllNotificationsAsReadResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.MarkAllNotificationsAsRead(ctx, in, opts...)
}

// 删除通知
func (m *defaultNotification) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.DeleteNotification(ctx, in, opts...)
}

// 删除所有通知
func (m *defaultNotification) DeleteAllNotifications(ctx context.Context, in *DeleteAllNotificationsRequest, opts ...grpc.CallOption) (*DeleteAllNotificationsResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.DeleteAllNotifications(ctx, in, opts...)
}

// 推送通知
func (m *defaultNotification) PushNotification(ctx context.Context, in *PushNotificationRequest, opts ...grpc.CallOption) (*PushNotificationResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.PushNotification(ctx, in, opts...)
}

// 获取未读通知数量
func (m *defaultNotification) GetUnreadNotificationCount(ctx context.Context, in *GetUnreadNotificationCountRequest, opts ...grpc.CallOption) (*GetUnreadNotificationCountResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.GetUnreadNotificationCount(ctx, in, opts...)
}

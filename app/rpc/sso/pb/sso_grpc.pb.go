// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sso.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Auth_LoginByMobile_FullMethodName        = "/sso.auth/LoginByMobile"
	Auth_LoginByPassword_FullMethodName      = "/sso.auth/LoginByPassword"
	Auth_LoginByThirdParty_FullMethodName    = "/sso.auth/LoginByThirdParty"
	Auth_GenerateQrcode_FullMethodName       = "/sso.auth/GenerateQrcode"
	Auth_CheckQrcodeStatus_FullMethodName    = "/sso.auth/CheckQrcodeStatus"
	Auth_ConfirmQrcodeLogin_FullMethodName   = "/sso.auth/ConfirmQrcodeLogin"
	Auth_VerifyToken_FullMethodName          = "/sso.auth/VerifyToken"
	Auth_Logout_FullMethodName               = "/sso.auth/Logout"
	Auth_Register_FullMethodName             = "/sso.auth/Register"
	Auth_SendSmsCode_FullMethodName          = "/sso.auth/SendSmsCode"
	Auth_ResetPassword_FullMethodName        = "/sso.auth/ResetPassword"
	Auth_RefreshToken_FullMethodName         = "/sso.auth/RefreshToken"
	Auth_SendEmailCode_FullMethodName        = "/sso.auth/SendEmailCode"
	Auth_ResetPasswordByEmail_FullMethodName = "/sso.auth/ResetPasswordByEmail"
	Auth_BindMobile_FullMethodName           = "/sso.auth/BindMobile"
	Auth_BindEmail_FullMethodName            = "/sso.auth/BindEmail"
	Auth_UnbindMobile_FullMethodName         = "/sso.auth/UnbindMobile"
	Auth_UnbindEmail_FullMethodName          = "/sso.auth/UnbindEmail"
	Auth_UnbindThirdParty_FullMethodName     = "/sso.auth/UnbindThirdParty"
	Auth_BindThirdParty_FullMethodName       = "/sso.auth/BindThirdParty"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// 用户登录
	// 手机号验证码登录
	LoginByMobile(ctx context.Context, in *LoginByMobileReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 账号密码登录
	LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 第三方平台登录
	LoginByThirdParty(ctx context.Context, in *LoginByThirdPartyReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 生成登录二维码(PC端)
	GenerateQrcode(ctx context.Context, in *QrcodeReq, opts ...grpc.CallOption) (*QrcodeResp, error)
	// 检查二维码状态(PC端)
	CheckQrcodeStatus(ctx context.Context, in *QrcodeStatusReq, opts ...grpc.CallOption) (*QrcodeStatusResp, error)
	// 手机端确认登录(PC端)
	ConfirmQrcodeLogin(ctx context.Context, in *QrcodeConfirmReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 验证会话
	VerifyToken(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
	// 用户登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// 发送短信验证码
	SendSmsCode(ctx context.Context, in *SendSmsCodeReq, opts ...grpc.CallOption) (*SendSmsCodeResp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	// 刷新Token
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
	// 发送邮件验证码
	SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeResp, error)
	// 重置密码
	ResetPasswordByEmail(ctx context.Context, in *ResetPasswordByEmailReq, opts ...grpc.CallOption) (*ResetPasswordByEmailResp, error)
	// 绑定手机号
	BindMobile(ctx context.Context, in *BindMobileReq, opts ...grpc.CallOption) (*BindMobileResp, error)
	// 绑定邮箱
	BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*BindEmailResp, error)
	// 解绑手机号
	UnbindMobile(ctx context.Context, in *UnbindMobileReq, opts ...grpc.CallOption) (*UnbindMobileResp, error)
	// 解绑邮箱
	UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...grpc.CallOption) (*UnbindEmailResp, error)
	// 解绑第三方登录
	UnbindThirdParty(ctx context.Context, in *UnbindThirdPartyReq, opts ...grpc.CallOption) (*UnbindThirdPartyResp, error)
	// 绑定第三方登录
	BindThirdParty(ctx context.Context, in *BindThirdPartyReq, opts ...grpc.CallOption) (*BindThirdPartyResp, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) LoginByMobile(ctx context.Context, in *LoginByMobileReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Auth_LoginByMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Auth_LoginByPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginByThirdParty(ctx context.Context, in *LoginByThirdPartyReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Auth_LoginByThirdParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GenerateQrcode(ctx context.Context, in *QrcodeReq, opts ...grpc.CallOption) (*QrcodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QrcodeResp)
	err := c.cc.Invoke(ctx, Auth_GenerateQrcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckQrcodeStatus(ctx context.Context, in *QrcodeStatusReq, opts ...grpc.CallOption) (*QrcodeStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QrcodeStatusResp)
	err := c.cc.Invoke(ctx, Auth_CheckQrcodeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ConfirmQrcodeLogin(ctx context.Context, in *QrcodeConfirmReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Auth_ConfirmQrcodeLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyToken(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResp)
	err := c.cc.Invoke(ctx, Auth_VerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, Auth_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Auth_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendSmsCode(ctx context.Context, in *SendSmsCodeReq, opts ...grpc.CallOption) (*SendSmsCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsCodeResp)
	err := c.cc.Invoke(ctx, Auth_SendSmsCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, Auth_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResp)
	err := c.cc.Invoke(ctx, Auth_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailCodeResp)
	err := c.cc.Invoke(ctx, Auth_SendEmailCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ResetPasswordByEmail(ctx context.Context, in *ResetPasswordByEmailReq, opts ...grpc.CallOption) (*ResetPasswordByEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordByEmailResp)
	err := c.cc.Invoke(ctx, Auth_ResetPasswordByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) BindMobile(ctx context.Context, in *BindMobileReq, opts ...grpc.CallOption) (*BindMobileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindMobileResp)
	err := c.cc.Invoke(ctx, Auth_BindMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*BindEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindEmailResp)
	err := c.cc.Invoke(ctx, Auth_BindEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UnbindMobile(ctx context.Context, in *UnbindMobileReq, opts ...grpc.CallOption) (*UnbindMobileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindMobileResp)
	err := c.cc.Invoke(ctx, Auth_UnbindMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...grpc.CallOption) (*UnbindEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindEmailResp)
	err := c.cc.Invoke(ctx, Auth_UnbindEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UnbindThirdParty(ctx context.Context, in *UnbindThirdPartyReq, opts ...grpc.CallOption) (*UnbindThirdPartyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindThirdPartyResp)
	err := c.cc.Invoke(ctx, Auth_UnbindThirdParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) BindThirdParty(ctx context.Context, in *BindThirdPartyReq, opts ...grpc.CallOption) (*BindThirdPartyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindThirdPartyResp)
	err := c.cc.Invoke(ctx, Auth_BindThirdParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	// 用户登录
	// 手机号验证码登录
	LoginByMobile(context.Context, *LoginByMobileReq) (*LoginResp, error)
	// 账号密码登录
	LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginResp, error)
	// 第三方平台登录
	LoginByThirdParty(context.Context, *LoginByThirdPartyReq) (*LoginResp, error)
	// 生成登录二维码(PC端)
	GenerateQrcode(context.Context, *QrcodeReq) (*QrcodeResp, error)
	// 检查二维码状态(PC端)
	CheckQrcodeStatus(context.Context, *QrcodeStatusReq) (*QrcodeStatusResp, error)
	// 手机端确认登录(PC端)
	ConfirmQrcodeLogin(context.Context, *QrcodeConfirmReq) (*LoginResp, error)
	// 验证会话
	VerifyToken(context.Context, *VerifyReq) (*VerifyResp, error)
	// 用户登出
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// 发送短信验证码
	SendSmsCode(context.Context, *SendSmsCodeReq) (*SendSmsCodeResp, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	// 刷新Token
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error)
	// 发送邮件验证码
	SendEmailCode(context.Context, *SendEmailCodeReq) (*SendEmailCodeResp, error)
	// 重置密码
	ResetPasswordByEmail(context.Context, *ResetPasswordByEmailReq) (*ResetPasswordByEmailResp, error)
	// 绑定手机号
	BindMobile(context.Context, *BindMobileReq) (*BindMobileResp, error)
	// 绑定邮箱
	BindEmail(context.Context, *BindEmailReq) (*BindEmailResp, error)
	// 解绑手机号
	UnbindMobile(context.Context, *UnbindMobileReq) (*UnbindMobileResp, error)
	// 解绑邮箱
	UnbindEmail(context.Context, *UnbindEmailReq) (*UnbindEmailResp, error)
	// 解绑第三方登录
	UnbindThirdParty(context.Context, *UnbindThirdPartyReq) (*UnbindThirdPartyResp, error)
	// 绑定第三方登录
	BindThirdParty(context.Context, *BindThirdPartyReq) (*BindThirdPartyResp, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) LoginByMobile(context.Context, *LoginByMobileReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByMobile not implemented")
}
func (UnimplementedAuthServer) LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPassword not implemented")
}
func (UnimplementedAuthServer) LoginByThirdParty(context.Context, *LoginByThirdPartyReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByThirdParty not implemented")
}
func (UnimplementedAuthServer) GenerateQrcode(context.Context, *QrcodeReq) (*QrcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQrcode not implemented")
}
func (UnimplementedAuthServer) CheckQrcodeStatus(context.Context, *QrcodeStatusReq) (*QrcodeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQrcodeStatus not implemented")
}
func (UnimplementedAuthServer) ConfirmQrcodeLogin(context.Context, *QrcodeConfirmReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmQrcodeLogin not implemented")
}
func (UnimplementedAuthServer) VerifyToken(context.Context, *VerifyReq) (*VerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedAuthServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) SendSmsCode(context.Context, *SendSmsCodeReq) (*SendSmsCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmsCode not implemented")
}
func (UnimplementedAuthServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServer) SendEmailCode(context.Context, *SendEmailCodeReq) (*SendEmailCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (UnimplementedAuthServer) ResetPasswordByEmail(context.Context, *ResetPasswordByEmailReq) (*ResetPasswordByEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByEmail not implemented")
}
func (UnimplementedAuthServer) BindMobile(context.Context, *BindMobileReq) (*BindMobileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindMobile not implemented")
}
func (UnimplementedAuthServer) BindEmail(context.Context, *BindEmailReq) (*BindEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEmail not implemented")
}
func (UnimplementedAuthServer) UnbindMobile(context.Context, *UnbindMobileReq) (*UnbindMobileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindMobile not implemented")
}
func (UnimplementedAuthServer) UnbindEmail(context.Context, *UnbindEmailReq) (*UnbindEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindEmail not implemented")
}
func (UnimplementedAuthServer) UnbindThirdParty(context.Context, *UnbindThirdPartyReq) (*UnbindThirdPartyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindThirdParty not implemented")
}
func (UnimplementedAuthServer) BindThirdParty(context.Context, *BindThirdPartyReq) (*BindThirdPartyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindThirdParty not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_LoginByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByMobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_LoginByMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginByMobile(ctx, req.(*LoginByMobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_LoginByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginByPassword(ctx, req.(*LoginByPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginByThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByThirdPartyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginByThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_LoginByThirdParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginByThirdParty(ctx, req.(*LoginByThirdPartyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GenerateQrcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GenerateQrcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GenerateQrcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GenerateQrcode(ctx, req.(*QrcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckQrcodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrcodeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckQrcodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CheckQrcodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckQrcodeStatus(ctx, req.(*QrcodeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ConfirmQrcodeLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrcodeConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ConfirmQrcodeLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ConfirmQrcodeLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ConfirmQrcodeLogin(ctx, req.(*QrcodeConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyToken(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SendSmsCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendSmsCode(ctx, req.(*SendSmsCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_SendEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendEmailCode(ctx, req.(*SendEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ResetPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ResetPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ResetPasswordByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ResetPasswordByEmail(ctx, req.(*ResetPasswordByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_BindMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindMobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).BindMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_BindMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).BindMobile(ctx, req.(*BindMobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_BindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).BindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_BindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).BindEmail(ctx, req.(*BindEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UnbindMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindMobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UnbindMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UnbindMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UnbindMobile(ctx, req.(*UnbindMobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UnbindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UnbindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UnbindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UnbindEmail(ctx, req.(*UnbindEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UnbindThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindThirdPartyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UnbindThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UnbindThirdParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UnbindThirdParty(ctx, req.(*UnbindThirdPartyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_BindThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindThirdPartyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).BindThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_BindThirdParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).BindThirdParty(ctx, req.(*BindThirdPartyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByMobile",
			Handler:    _Auth_LoginByMobile_Handler,
		},
		{
			MethodName: "LoginByPassword",
			Handler:    _Auth_LoginByPassword_Handler,
		},
		{
			MethodName: "LoginByThirdParty",
			Handler:    _Auth_LoginByThirdParty_Handler,
		},
		{
			MethodName: "GenerateQrcode",
			Handler:    _Auth_GenerateQrcode_Handler,
		},
		{
			MethodName: "CheckQrcodeStatus",
			Handler:    _Auth_CheckQrcodeStatus_Handler,
		},
		{
			MethodName: "ConfirmQrcodeLogin",
			Handler:    _Auth_ConfirmQrcodeLogin_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _Auth_VerifyToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "SendSmsCode",
			Handler:    _Auth_SendSmsCode_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Auth_ResetPassword_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "SendEmailCode",
			Handler:    _Auth_SendEmailCode_Handler,
		},
		{
			MethodName: "ResetPasswordByEmail",
			Handler:    _Auth_ResetPasswordByEmail_Handler,
		},
		{
			MethodName: "BindMobile",
			Handler:    _Auth_BindMobile_Handler,
		},
		{
			MethodName: "BindEmail",
			Handler:    _Auth_BindEmail_Handler,
		},
		{
			MethodName: "UnbindMobile",
			Handler:    _Auth_UnbindMobile_Handler,
		},
		{
			MethodName: "UnbindEmail",
			Handler:    _Auth_UnbindEmail_Handler,
		},
		{
			MethodName: "UnbindThirdParty",
			Handler:    _Auth_UnbindThirdParty_Handler,
		},
		{
			MethodName: "BindThirdParty",
			Handler:    _Auth_BindThirdParty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}

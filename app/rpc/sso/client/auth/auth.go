// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: sso.proto

package auth

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/sso/sso"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq         = sso.LoginReq
	LoginResp        = sso.LoginResp
	LogoutReq        = sso.LogoutReq
	QrcodeConfirmReq = sso.QrcodeConfirmReq
	QrcodeReq        = sso.QrcodeReq
	QrcodeResp       = sso.QrcodeResp
	QrcodeStatusReq  = sso.QrcodeStatusReq
	QrcodeStatusResp = sso.QrcodeStatusResp
	VerifyReq        = sso.VerifyReq
	VerifyResp       = sso.VerifyResp

	Auth interface {
		// 用户登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 生成登录二维码
		GenerateQrcode(ctx context.Context, in *QrcodeReq, opts ...grpc.CallOption) (*QrcodeResp, error)
		// 检查二维码状态
		CheckQrcodeStatus(ctx context.Context, in *QrcodeStatusReq, opts ...grpc.CallOption) (*QrcodeStatusResp, error)
		// 手机端确认登录
		ConfirmQrcodeLogin(ctx context.Context, in *QrcodeConfirmReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 验证会话
		VerifyToken(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
		// 用户登出
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*VerifyResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

// 用户登录
func (m *defaultAuth) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := sso.NewAuthClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 生成登录二维码
func (m *defaultAuth) GenerateQrcode(ctx context.Context, in *QrcodeReq, opts ...grpc.CallOption) (*QrcodeResp, error) {
	client := sso.NewAuthClient(m.cli.Conn())
	return client.GenerateQrcode(ctx, in, opts...)
}

// 检查二维码状态
func (m *defaultAuth) CheckQrcodeStatus(ctx context.Context, in *QrcodeStatusReq, opts ...grpc.CallOption) (*QrcodeStatusResp, error) {
	client := sso.NewAuthClient(m.cli.Conn())
	return client.CheckQrcodeStatus(ctx, in, opts...)
}

// 手机端确认登录
func (m *defaultAuth) ConfirmQrcodeLogin(ctx context.Context, in *QrcodeConfirmReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := sso.NewAuthClient(m.cli.Conn())
	return client.ConfirmQrcodeLogin(ctx, in, opts...)
}

// 验证会话
func (m *defaultAuth) VerifyToken(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	client := sso.NewAuthClient(m.cli.Conn())
	return client.VerifyToken(ctx, in, opts...)
}

// 用户登出
func (m *defaultAuth) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	client := sso.NewAuthClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

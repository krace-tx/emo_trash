// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: sso.proto

package server

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/sso/internal/logic/auth"
	"github.com/krace-tx/emo_trash/app/rpc/sso/internal/svc"
	"github.com/krace-tx/emo_trash/app/rpc/sso/sso"
)

type AuthServer struct {
	svcCtx *svc.ServiceContext
	sso.UnimplementedAuthServer
}

func NewAuthServer(svcCtx *svc.ServiceContext) *AuthServer {
	return &AuthServer{
		svcCtx: svcCtx,
	}
}

// 用户登录
func (s *AuthServer) Login(ctx context.Context, in *sso.LoginReq) (*sso.LoginResp, error) {
	l := authlogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 生成登录二维码
func (s *AuthServer) GenerateQrcode(ctx context.Context, in *sso.QrcodeReq) (*sso.QrcodeResp, error) {
	l := authlogic.NewGenerateQrcodeLogic(ctx, s.svcCtx)
	return l.GenerateQrcode(in)
}

// 检查二维码状态
func (s *AuthServer) CheckQrcodeStatus(ctx context.Context, in *sso.QrcodeStatusReq) (*sso.QrcodeStatusResp, error) {
	l := authlogic.NewCheckQrcodeStatusLogic(ctx, s.svcCtx)
	return l.CheckQrcodeStatus(in)
}

// 手机端确认登录
func (s *AuthServer) ConfirmQrcodeLogin(ctx context.Context, in *sso.QrcodeConfirmReq) (*sso.LoginResp, error) {
	l := authlogic.NewConfirmQrcodeLoginLogic(ctx, s.svcCtx)
	return l.ConfirmQrcodeLogin(in)
}

// 验证会话
func (s *AuthServer) VerifyToken(ctx context.Context, in *sso.VerifyReq) (*sso.VerifyResp, error) {
	l := authlogic.NewVerifyTokenLogic(ctx, s.svcCtx)
	return l.VerifyToken(in)
}

// 用户登出
func (s *AuthServer) Logout(ctx context.Context, in *sso.LogoutReq) (*sso.VerifyResp, error) {
	l := authlogic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

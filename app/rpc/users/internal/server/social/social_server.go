// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: users.proto

package server

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/users/internal/logic/social"
	"github.com/krace-tx/emo_trash/app/rpc/users/internal/svc"
	"github.com/krace-tx/emo_trash/app/rpc/users/users"
)

type SocialServer struct {
	svcCtx *svc.ServiceContext
	users.UnimplementedSocialServer
}

func NewSocialServer(svcCtx *svc.ServiceContext) *SocialServer {
	return &SocialServer{
		svcCtx: svcCtx,
	}
}

// 关注其他用户
func (s *SocialServer) FollowUser(ctx context.Context, in *users.FollowUserRequest) (*users.FollowUserResponse, error) {
	l := sociallogic.NewFollowUserLogic(ctx, s.svcCtx)
	return l.FollowUser(in)
}

// 取消关注
func (s *SocialServer) UnfollowUser(ctx context.Context, in *users.UnfollowUserRequest) (*users.UnfollowUserResponse, error) {
	l := sociallogic.NewUnfollowUserLogic(ctx, s.svcCtx)
	return l.UnfollowUser(in)
}

// 获取用户关注列表
func (s *SocialServer) GetFollowList(ctx context.Context, in *users.GetFollowListRequest) (*users.GetFollowListResponse, error) {
	l := sociallogic.NewGetFollowListLogic(ctx, s.svcCtx)
	return l.GetFollowList(in)
}

// 获取用户的粉丝列表
func (s *SocialServer) GetFollowerList(ctx context.Context, in *users.GetFollowerListRequest) (*users.GetFollowerListResponse, error) {
	l := sociallogic.NewGetFollowerListLogic(ctx, s.svcCtx)
	return l.GetFollowerList(in)
}

// 查询互关朋友
func (s *SocialServer) GetMutualFriends(ctx context.Context, in *users.GetMutualFriendsRequest) (*users.GetMutualFriendsResponse, error) {
	l := sociallogic.NewGetMutualFriendsLogic(ctx, s.svcCtx)
	return l.GetMutualFriends(in)
}

// 查询其他用户与自己的关系状态码
func (s *SocialServer) GetFollowStatus(ctx context.Context, in *users.GetFollowStatusRequest) (*users.GetFollowStatusResponse, error) {
	l := sociallogic.NewGetFollowStatusLogic(ctx, s.svcCtx)
	return l.GetFollowStatus(in)
}

// 屏蔽用户
func (s *SocialServer) BlockUser(ctx context.Context, in *users.BlockUserRequest) (*users.BlockUserResponse, error) {
	l := sociallogic.NewBlockUserLogic(ctx, s.svcCtx)
	return l.BlockUser(in)
}

// 获取屏蔽用户列表
func (s *SocialServer) GetBlockedUsers(ctx context.Context, in *users.GetBlockedUsersRequest) (*users.GetBlockedUsersResponse, error) {
	l := sociallogic.NewGetBlockedUsersLogic(ctx, s.svcCtx)
	return l.GetBlockedUsers(in)
}

// 举报用户
func (s *SocialServer) ReportUser(ctx context.Context, in *users.ReportUserRequest) (*users.ReportUserResponse, error) {
	l := sociallogic.NewReportUserLogic(ctx, s.svcCtx)
	return l.ReportUser(in)
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: users.proto

package social

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/users/users"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BlockUserRequest         = users.BlockUserRequest
	BlockUserResponse        = users.BlockUserResponse
	EditUserInfoRequest      = users.EditUserInfoRequest
	EditUserInfoResponse     = users.EditUserInfoResponse
	EditUserSettingRequest   = users.EditUserSettingRequest
	EditUserSettingResponse  = users.EditUserSettingResponse
	FollowUserRequest        = users.FollowUserRequest
	FollowUserResponse       = users.FollowUserResponse
	GetBlockedUsersRequest   = users.GetBlockedUsersRequest
	GetBlockedUsersResponse  = users.GetBlockedUsersResponse
	GetFollowListRequest     = users.GetFollowListRequest
	GetFollowListResponse    = users.GetFollowListResponse
	GetFollowStatusRequest   = users.GetFollowStatusRequest
	GetFollowStatusResponse  = users.GetFollowStatusResponse
	GetFollowerListRequest   = users.GetFollowerListRequest
	GetFollowerListResponse  = users.GetFollowerListResponse
	GetMutualFriendsRequest  = users.GetMutualFriendsRequest
	GetMutualFriendsResponse = users.GetMutualFriendsResponse
	GetUserInfoRequest       = users.GetUserInfoRequest
	GetUserInfoResponse      = users.GetUserInfoResponse
	GetUserSettingRequest    = users.GetUserSettingRequest
	GetUserSettingResponse   = users.GetUserSettingResponse
	RegisterUserRequest      = users.RegisterUserRequest
	RegisterUserResponse     = users.RegisterUserResponse
	ReportUserRequest        = users.ReportUserRequest
	ReportUserResponse       = users.ReportUserResponse
	SearchUsersRequest       = users.SearchUsersRequest
	SearchUsersResponse      = users.SearchUsersResponse
	UnfollowUserRequest      = users.UnfollowUserRequest
	UnfollowUserResponse     = users.UnfollowUserResponse
	UserInfoBase             = users.UserInfoBase
	UserInfoDetail           = users.UserInfoDetail
	UserSetting              = users.UserSetting

	Social interface {
		// 关注其他用户
		FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
		// 取消关注
		UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
		// 获取用户关注列表
		GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error)
		// 获取用户的粉丝列表
		GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error)
		// 查询互关朋友
		GetMutualFriends(ctx context.Context, in *GetMutualFriendsRequest, opts ...grpc.CallOption) (*GetMutualFriendsResponse, error)
		// 查询其他用户与自己的关系状态码
		GetFollowStatus(ctx context.Context, in *GetFollowStatusRequest, opts ...grpc.CallOption) (*GetFollowStatusResponse, error)
		// 屏蔽用户
		BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error)
		// 获取屏蔽用户列表
		GetBlockedUsers(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*GetBlockedUsersResponse, error)
		// 举报用户
		ReportUser(ctx context.Context, in *ReportUserRequest, opts ...grpc.CallOption) (*ReportUserResponse, error)
	}

	defaultSocial struct {
		cli zrpc.Client
	}
)

func NewSocial(cli zrpc.Client) Social {
	return &defaultSocial{
		cli: cli,
	}
}

// 关注其他用户
func (m *defaultSocial) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.FollowUser(ctx, in, opts...)
}

// 取消关注
func (m *defaultSocial) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.UnfollowUser(ctx, in, opts...)
}

// 获取用户关注列表
func (m *defaultSocial) GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...grpc.CallOption) (*GetFollowListResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.GetFollowList(ctx, in, opts...)
}

// 获取用户的粉丝列表
func (m *defaultSocial) GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

// 查询互关朋友
func (m *defaultSocial) GetMutualFriends(ctx context.Context, in *GetMutualFriendsRequest, opts ...grpc.CallOption) (*GetMutualFriendsResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.GetMutualFriends(ctx, in, opts...)
}

// 查询其他用户与自己的关系状态码
func (m *defaultSocial) GetFollowStatus(ctx context.Context, in *GetFollowStatusRequest, opts ...grpc.CallOption) (*GetFollowStatusResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.GetFollowStatus(ctx, in, opts...)
}

// 屏蔽用户
func (m *defaultSocial) BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.BlockUser(ctx, in, opts...)
}

// 获取屏蔽用户列表
func (m *defaultSocial) GetBlockedUsers(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*GetBlockedUsersResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.GetBlockedUsers(ctx, in, opts...)
}

// 举报用户
func (m *defaultSocial) ReportUser(ctx context.Context, in *ReportUserRequest, opts ...grpc.CallOption) (*ReportUserResponse, error) {
	client := users.NewSocialClient(m.cli.Conn())
	return client.ReportUser(ctx, in, opts...)
}

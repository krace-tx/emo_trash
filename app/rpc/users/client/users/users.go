// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: users.proto

package users

import (
	"context"

	"github.com/krace-tx/emo_trash/app/rpc/users/users"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BlockUserRequest         = users.BlockUserRequest
	BlockUserResponse        = users.BlockUserResponse
	EditUserInfoRequest      = users.EditUserInfoRequest
	EditUserInfoResponse     = users.EditUserInfoResponse
	EditUserSettingRequest   = users.EditUserSettingRequest
	EditUserSettingResponse  = users.EditUserSettingResponse
	FollowUserRequest        = users.FollowUserRequest
	FollowUserResponse       = users.FollowUserResponse
	GetBlockedUsersRequest   = users.GetBlockedUsersRequest
	GetBlockedUsersResponse  = users.GetBlockedUsersResponse
	GetFollowListRequest     = users.GetFollowListRequest
	GetFollowListResponse    = users.GetFollowListResponse
	GetFollowStatusRequest   = users.GetFollowStatusRequest
	GetFollowStatusResponse  = users.GetFollowStatusResponse
	GetFollowerListRequest   = users.GetFollowerListRequest
	GetFollowerListResponse  = users.GetFollowerListResponse
	GetMutualFriendsRequest  = users.GetMutualFriendsRequest
	GetMutualFriendsResponse = users.GetMutualFriendsResponse
	GetUserInfoRequest       = users.GetUserInfoRequest
	GetUserInfoResponse      = users.GetUserInfoResponse
	GetUserSettingRequest    = users.GetUserSettingRequest
	GetUserSettingResponse   = users.GetUserSettingResponse
	RegisterUserRequest      = users.RegisterUserRequest
	RegisterUserResponse     = users.RegisterUserResponse
	ReportUserRequest        = users.ReportUserRequest
	ReportUserResponse       = users.ReportUserResponse
	SearchUsersRequest       = users.SearchUsersRequest
	SearchUsersResponse      = users.SearchUsersResponse
	UnfollowUserRequest      = users.UnfollowUserRequest
	UnfollowUserResponse     = users.UnfollowUserResponse
	UserInfoBase             = users.UserInfoBase
	UserInfoDetail           = users.UserInfoDetail
	UserSetting              = users.UserSetting

	Users interface {
		// 获取用户的信息
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
		// 更新用户信息
		EditUserInfo(ctx context.Context, in *EditUserInfoRequest, opts ...grpc.CallOption) (*EditUserInfoResponse, error)
		// 注册用户
		RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
		// 编辑隐私权限
		EditUserSetting(ctx context.Context, in *EditUserSettingRequest, opts ...grpc.CallOption) (*EditUserSettingResponse, error)
		// 获取隐私权限信息
		GetUserSetting(ctx context.Context, in *GetUserSettingRequest, opts ...grpc.CallOption) (*GetUserSettingResponse, error)
		// 搜索用户
		SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

// 获取用户的信息
func (m *defaultUsers) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUsers) EditUserInfo(ctx context.Context, in *EditUserInfoRequest, opts ...grpc.CallOption) (*EditUserInfoResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.EditUserInfo(ctx, in, opts...)
}

// 注册用户
func (m *defaultUsers) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.RegisterUser(ctx, in, opts...)
}

// 编辑隐私权限
func (m *defaultUsers) EditUserSetting(ctx context.Context, in *EditUserSettingRequest, opts ...grpc.CallOption) (*EditUserSettingResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.EditUserSetting(ctx, in, opts...)
}

// 获取隐私权限信息
func (m *defaultUsers) GetUserSetting(ctx context.Context, in *GetUserSettingRequest, opts ...grpc.CallOption) (*GetUserSettingResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.GetUserSetting(ctx, in, opts...)
}

// 搜索用户
func (m *defaultUsers) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.SearchUsers(ctx, in, opts...)
}

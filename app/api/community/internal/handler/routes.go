// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	article "github.com/krace-tx/emo_trash/app/api/community/internal/handler/article"
	chat "github.com/krace-tx/emo_trash/app/api/community/internal/handler/chat"
	comment "github.com/krace-tx/emo_trash/app/api/community/internal/handler/comment"
	notification "github.com/krace-tx/emo_trash/app/api/community/internal/handler/notification"
	social "github.com/krace-tx/emo_trash/app/api/community/internal/handler/social"
	users "github.com/krace-tx/emo_trash/app/api/community/internal/handler/users"
	"github.com/krace-tx/emo_trash/app/api/community/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Filter},
			[]rest.Route{
				{
					// 编辑文章活动状态
					Method:  http.MethodPost,
					Path:    "/action/:types",
					Handler: article.ActionArticleHandler(serverCtx),
				},
				{
					// 发布文章
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: article.CreateArticleHandler(serverCtx),
				},
				{
					// 删除文章
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: article.DeleteArticleHandler(serverCtx),
				},
				{
					// 查看用户的草稿列表
					Method:  http.MethodGet,
					Path:    "/draft/list",
					Handler: article.GetDraftArticlesHandler(serverCtx),
				},
				{
					// 保存草稿
					Method:  http.MethodPost,
					Path:    "/draft/save",
					Handler: article.SaveDraftArticleHandler(serverCtx),
				},
				{
					// 编辑文章
					Method:  http.MethodPost,
					Path:    "/edit",
					Handler: article.EditArticleHandler(serverCtx),
				},
				{
					// 获取用户收藏的文章
					Method:  http.MethodGet,
					Path:    "/favorite",
					Handler: article.GetFavoriteHandler(serverCtx),
				},
				{
					// 查询文章
					Method:  http.MethodGet,
					Path:    "/get",
					Handler: article.GetArticleHandler(serverCtx),
				},
				{
					// 查看用户发布的文章列表
					Method:  http.MethodGet,
					Path:    "/get/:user_id",
					Handler: article.GetArticlesByUserHandler(serverCtx),
				},
				{
					// 查询历史记录
					Method:  http.MethodGet,
					Path:    "/history",
					Handler: article.ViewHistoryHandler(serverCtx),
				},
				{
					// 查询文章分区
					Method:  http.MethodGet,
					Path:    "/partitions/query",
					Handler: article.GetPartitionsHandler(serverCtx),
				},
				{
					// 查询待审核的文章列表
					Method:  http.MethodGet,
					Path:    "/pending",
					Handler: article.QueryPendingArticlesHandler(serverCtx),
				},
				{
					// 推荐文章列表
					Method:  http.MethodGet,
					Path:    "/recommend",
					Handler: article.RecommendArticlesHandler(serverCtx),
				},
				{
					// 举报文章
					Method:  http.MethodPost,
					Path:    "/report",
					Handler: article.ReportArticleHandler(serverCtx),
				},
				{
					// 查询审核通过的文章列表
					Method:  http.MethodGet,
					Path:    "/review/query",
					Handler: article.QueryReviewArticlesHandler(serverCtx),
				},
				{
					// 审核文章（通过/未通过）
					Method:  http.MethodGet,
					Path:    "/reviewed/query",
					Handler: article.ReviewArticleHandler(serverCtx),
				},
				{
					// 全局搜索文章接口
					Method:  http.MethodGet,
					Path:    "/search",
					Handler: article.GlobalSearchHandler(serverCtx),
				},
				{
					// 分享文章
					Method:  http.MethodPost,
					Path:    "/share",
					Handler: article.ShareArticleHandler(serverCtx),
				},
				{
					// 获取热门帖子
					Method:  http.MethodGet,
					Path:    "/topics/hot",
					Handler: article.GetHotTopicsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/article"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Filter},
			[]rest.Route{
				{
					// 查询聊天记录
					Method:  http.MethodPost,
					Path:    "/history",
					Handler: chat.GetChatHistoryHandler(serverCtx),
				},
				{
					// 发送消息
					Method:  http.MethodPost,
					Path:    "/publish",
					Handler: chat.SendMessageHandler(serverCtx),
				},
				{
					// 接收消息
					Method:  http.MethodPost,
					Path:    "/receive",
					Handler: chat.ReceiveMessageHandler(serverCtx),
				},
				{
					// 查询指定对话窗口的聊天记录
					Method:  http.MethodGet,
					Path:    "/window",
					Handler: chat.GetChatWindowHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/chat"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Filter},
			[]rest.Route{
				{
					// 点赞评论/或取消点赞
					Method:  http.MethodPost,
					Path:    "/like",
					Handler: comment.LikeCommentHandler(serverCtx),
				},
				{
					// 检查用户是否对评论进行点赞
					Method:  http.MethodGet,
					Path:    "/like/check",
					Handler: comment.CheckIsLikeCommentHandler(serverCtx),
				},
				{
					// 获取楼主评论
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: comment.GetCommentListHandler(serverCtx),
				},
				{
					// 获取回复评论
					Method:  http.MethodGet,
					Path:    "/list/reply",
					Handler: comment.GetReplyCommentListHandler(serverCtx),
				},
				{
					// 发布评论信息
					Method:  http.MethodPost,
					Path:    "/publish",
					Handler: comment.CreateCommentHandler(serverCtx),
				},
				{
					// 回复评论信息
					Method:  http.MethodPost,
					Path:    "/reply",
					Handler: comment.ReplyCommentHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/comment"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Filter},
			[]rest.Route{
				{
					// 删除通知
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: notification.DeleteNotificationHandler(serverCtx),
				},
				{
					// 删除所有通知
					Method:  http.MethodPost,
					Path:    "/delete/all",
					Handler: notification.DeleteAllNotificationsHandler(serverCtx),
				},
				{
					// 获取用户的通知列表
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: notification.GetNotificationListHandler(serverCtx),
				},
				{
					// 标记通知为已读
					Method:  http.MethodPost,
					Path:    "/mark/read",
					Handler: notification.MarkNotificationAsReadHandler(serverCtx),
				},
				{
					// 标记所有通知为已读
					Method:  http.MethodPost,
					Path:    "/mark/read/all",
					Handler: notification.MarkAllNotificationsAsReadHandler(serverCtx),
				},
				{
					// 推送通知
					Method:  http.MethodPost,
					Path:    "/push",
					Handler: notification.PushNotificationHandler(serverCtx),
				},
				{
					// 获取未读通知数量
					Method:  http.MethodGet,
					Path:    "/unread/count",
					Handler: notification.GetUnreadNotificationCountHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/notification"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Filter},
			[]rest.Route{
				{
					// 关注其他用户
					Method:  http.MethodPost,
					Path:    "/follow",
					Handler: social.FollowUserHandler(serverCtx),
				},
				{
					// 获取用户关注列表
					Method:  http.MethodGet,
					Path:    "/follow/list",
					Handler: social.GetFollowListHandler(serverCtx),
				},
				{
					// 查询其他用户与自己的关系状态码
					Method:  http.MethodGet,
					Path:    "/follow/status",
					Handler: social.GetFollowStatusHandler(serverCtx),
				},
				{
					// 获取用户粉丝列表
					Method:  http.MethodGet,
					Path:    "/follower/list",
					Handler: social.GetFollowerListHandler(serverCtx),
				},
				{
					// 查询互关朋友
					Method:  http.MethodGet,
					Path:    "/mutual/friends",
					Handler: social.GetMutualFriendsHandler(serverCtx),
				},
				{
					// 取消关注
					Method:  http.MethodPost,
					Path:    "/unfollow",
					Handler: social.UnfollowUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/social"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Filter},
			[]rest.Route{
				{
					// 编辑用户信息
					Method:  http.MethodPost,
					Path:    "/edit/info",
					Handler: users.EditUserInfoHandler(serverCtx),
				},
				{
					// 编辑用户隐私权限
					Method:  http.MethodPost,
					Path:    "/edit/setting",
					Handler: users.EditUserSettingHandler(serverCtx),
				},
				{
					// 获取一次性通行证
					Method:  http.MethodPost,
					Path:    "/get/passkey",
					Handler: users.GetPassKeyHandler(serverCtx),
				},
				{
					// 获取用户信息
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: users.GetUserInfoHandler(serverCtx),
				},
				{
					// 获取用户隐私权限
					Method:  http.MethodGet,
					Path:    "/permission",
					Handler: users.GetUserSettingHandler(serverCtx),
				},
				{
					// 注册账号信息
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: users.RegisterUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/users"),
	)
}

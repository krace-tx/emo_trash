// goctl rpc protoc notification.proto --go_out=. --go-grpc_out=. --zrpc_out=.  -m
syntax = "proto3";

package notification;

option go_package = "./notification";

// 通知管理服务接口，用于用户通知的获取和管理
service Notification {
  // 获取用户的通知列表
  rpc GetNotificationList(GetNotificationListRequest) returns (GetNotificationListResponse);

  // 标记通知为已读
  rpc MarkNotificationAsRead(MarkNotificationAsReadRequest) returns (MarkNotificationAsReadResponse);

  // 标记所有通知为已读
  rpc MarkAllNotificationsAsRead(MarkAllNotificationsAsReadRequest) returns (MarkAllNotificationsAsReadResponse);

  // 删除通知
  rpc DeleteNotification(DeleteNotificationRequest) returns (DeleteNotificationResponse);

  // 删除所有通知
  rpc DeleteAllNotifications(DeleteAllNotificationsRequest) returns (DeleteAllNotificationsResponse);

  // 推送通知
  rpc PushNotification(PushNotificationRequest) returns (PushNotificationResponse);

  // 获取未读通知数量
  rpc GetUnreadNotificationCount(GetUnreadNotificationCountRequest) returns (GetUnreadNotificationCountResponse);
}

// 获取通知列表
message GetNotificationListRequest {
  string user_id = 1;        // 用户ID
  int32 page = 2;            // 页码
  int32 page_size = 3;       // 每页通知数
}

message GetNotificationListResponse {
  repeated Notify notifications = 1; // 通知列表
  int32 total_count = 2;        // 总通知数
}

// 标记单个通知为已读
message MarkNotificationAsReadRequest {
  string user_id = 1;         // 用户ID
  string notification_id = 2; // 通知ID
}

message MarkNotificationAsReadResponse {
  bool success = 1;             // 操作是否成功
}

// 标记所有通知为已读
message MarkAllNotificationsAsReadRequest {
  string user_id = 1;         // 用户ID
}

message MarkAllNotificationsAsReadResponse {
  bool success = 1;           // 操作是否成功
}

// 删除单个通知
message DeleteNotificationRequest {
  string user_id = 1;         // 用户ID
  string notification_id = 2; // 通知ID
}

message DeleteNotificationResponse {
  bool success = 1;             // 操作是否成功
}

// 删除所有通知
message DeleteAllNotificationsRequest {
  string user_id = 1;         // 用户ID
}

message DeleteAllNotificationsResponse {
  bool success = 1;           // 操作是否成功
}

// 推送通知
message PushNotificationRequest {
  Notify notify = 1;
}

message PushNotificationResponse {
  bool success = 1;             // 操作是否成功
  string notification_id = 2;   // 推送的通知ID
}

// 获取未读通知数量
message GetUnreadNotificationCountRequest {
  string user_id = 1;          // 用户ID
}

message GetUnreadNotificationCountResponse {
  int32 unread_count = 1;      // 未读通知数量
}

// 通知定义
message Notify {
  string id = 1;                // 通知ID
  string message = 3;           // 通知内容
  bool is_read = 4;             // 是否已读
  string create_at = 5;          // 时间戳
  string sender_id = 6;         // 发送者ID
  string receiver_id = 7;       // 接收者ID
  string extra_data = 8;        // 额外数据（JSON 格式字符串，用于扩展）
  string type = 9;              // 通知类型（如系统消息、用户消息、动态消息）
}

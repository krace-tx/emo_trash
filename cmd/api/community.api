//  goctl api go -api community.api -dir .
syntax = "v1"

type (
	UserInfo {
		Nickname   string   `json:"nickname,optional"` // 昵称
		Avatar     string   `json:"avatar,optional"` // 头像
		Gender     string   `json:"gender,optional"` // 性别
		Birthday   string   `json:"birthday,optional"` // 生日
		Tags       []string `json:"tags,optional"` // 标签
		Signature  string   `json:"signature,optional"` // 个性签名
		Identity   []string `json:"identity,optional"` // 身份
		Campus     string   `json:"campus,optional"` // 校区
		Background string   `json:"background,optional"` // 背景图
	}
	UserSetting {
		Gender    string `json:"gender,optional,options=男|女|其他"` // 性别
		Age       int    `json:"age,range=[18:100],default=18"` // 年龄，范围 18 到 100，默认值为 18
		Birthday  string `json:"birthday,optional"` // 生日，可选字段
		Signature string `json:"signature,optional"` // 个性签名，可选字段
		Tags      string `json:"tags,optional"` // 标签，可选字段
		Identity  string `json:"identity,optional"` // 身份，可选字段
		Campus    string `json:"campus,optional"` // 校区，可选字段
		Collect   string `json:"collect,optional"` // 收藏权限，可选字段
		Dynamic   string `json:"dynamic,optional"` // 动态权限，可选字段
		Fan       string `json:"fan,optional"` // 粉丝权限，可选字段
		Search    string `json:"search,optional"` // 搜索权限，可选字段
	}
	Response {
		Code    uint32                 `json:"code"`
		Success bool                   `json:"success"`
		Message string                 `json:"message"`
		Data    map[string]interface{} `json:"data"`
	}
)

type (
	GetUserInfoReq {
		TargetId string `form:"user_id"` // 目标用户id
	}
	RegisterUserInfoReq {
		nickname string `json:"nickname"`
		avatar   string `json:"avatar"`
		gender   string `json:"gender"`
	}
	EditUserInfoReq {
		UserInfo
	}
	GetUserSettingReq {
		UserId string `form:"user_id"` // 用户id
	}
	EditUserSettingReq {
		UserSetting
	}
)

@server (
	group:      users
	prefix:     /users
	middleware: Filter,Cors
)
service community {
	@doc "注册账号信息"
	@handler registerUser
	post /register (RegisterUserInfoReq) returns (Response)

	@doc "编辑用户信息"
	@handler editUserInfo
	post /edit/info (EditUserInfoReq) returns (Response)

	@doc "获取用户信息"
	@handler getUserInfo
	get /info (GetUserInfoReq) returns (Response)

	@doc "编辑用户隐私权限"
	@handler editUserSetting
	post /edit/setting (EditUserSettingReq) returns (Response)

	@doc "获取用户隐私权限"
	@handler getUserSetting
	get /permission (GetUserSettingReq) returns (Response)

	@doc "获取一次性通行证"
	@handler GetPassKey
	post /get/passkey returns (Response)
}

type (
	// 聊天相关结构体
	Message {
		ReceiverId  string `json:"receiver_id,optional"` // 接收者ID
		Content     string `json:"content,optional"` // 消息内容
		ContentType string `json:"content_type,optional"` // 消息类型（如文本、图片、文件）
		ExtraData   string `json:"extra_data,optional"` // 扩展数据
		Priority    int32  `json:"priority,optional"` // 消息优先级 (0, 1, 2)
	}
	SendMessageReq {
		Message
	}
	SendMessageResp {
		Reply string `json:"reply"`
	}
	ReceiveMessageReq {
		Page     int32 `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32 `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	GetChatHistoryReq {
		TargetId    string `json:"target_id"` // 聊天对象ID
		Page        int32  `json:"page,default=1"` // 页码，默认值为 1
		PageSize    int32  `json:"page_size,default=10"` // 每页大小，默认值为 10
		MessageType string `json:"message_type,optional"` // 消息类型（文本、图片、文件）
		StartTime   string `json:"start_time,optional"` // 查询开始时间（时间戳）
		EndTime     string `json:"end_time,optional"` // 查询结束时间（时间戳）
		SortOrder   bool   `json:"sort_order,optional"` // 排序方式（ASC、DESC）
	}
	GetChatWindowReq {
		TargetId string `form:"target_id"` // 聊天对象ID
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
)

@server (
	group:      chat
	prefix:     /chat
	timeout:    100s
	middleware: Filter
)
service community {
	@doc "发送消息"
	@handler SendMessage
	post /publish (SendMessageReq) returns (Response)

	@doc "接收消息"
	@handler ReceiveMessage
	post /receive (ReceiveMessageReq) returns (Response)

	@doc "查询聊天记录"
	@handler GetChatHistory
	post /history (GetChatHistoryReq) returns (Response)

	@doc "查询指定对话窗口的聊天记录"
	@handler GetChatWindow
	get /window (GetChatWindowReq) returns (Response)

	@doc "AI 聊天机器人"
	@handler ChatBot
	post /bot (SendMessageReq) returns (SendMessageResp)
}

type (
	FollowUserReq {
		FollowUserId string `form:"follow_user_id"` // 需要关注的用户ID
	}
	UnfollowUserReq {
		UnfollowUserId string `form:"unfollow_user_id"` // 需要取消关注的用户ID
	}
	GetFollowListReq {
		UserId   string `form:"user_id"` // 用户ID
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	GetFollowerListReq {
		UserId   string `form:"user_id"` // 用户ID
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	GetMutualFriendsReq {
		Page     int32 `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32 `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	GetFollowStatusReq {
		UserId   string `form:"user_id"` // 当前用户ID
		TargetId string `form:"target_id"` // 需要查询的用户ID
	}
)

@server (
	group:      social
	prefix:     /social
	middleware: Filter
)
service community {
	@doc "关注其他用户"
	@handler followUser
	post /follow (FollowUserReq) returns (Response)

	@doc "取消关注"
	@handler unfollowUser
	post /unfollow (UnfollowUserReq) returns (Response)

	@doc "获取用户关注列表"
	@handler getFollowList
	get /follow/list (GetFollowListReq) returns (Response)

	@doc "获取用户粉丝列表"
	@handler getFollowerList
	get /follower/list (GetFollowerListReq) returns (Response)

	@doc "查询互关朋友"
	@handler getMutualFriends
	get /mutual/friends (GetMutualFriendsReq) returns (Response)

	@doc "查询其他用户与自己的关系状态码"
	@handler getFollowStatus
	get /follow/status (GetFollowStatusReq) returns (Response)
}

type (
	CreateArticleReq {
		Title       string   `json:"title"` // 文章标题
		Content     string   `json:"content"` // 文章内容
		Annex       []string `json:"annex"` // 附件列表
		Tags        []string `json:"tags"` // 标签列表
		PartitionId string   `json:"partition_id"` // 分区信息
		Other       string   `json:"other"` // 前端给的其他参数
	}
	GetDraftArticlesReq {
		Page     int32 `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32 `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	EditArticleReq {
		Title     string   `json:"title"` // 文章标题
		Content   string   `json:"content"` // 文章内容
		Annex     []string `json:"annex"` // 附件列表
		Tags      []string `json:"tags"` // 标签列表
		ArticleId string   `json:"article_id"` // 文章id
	}
	DeleteArticleReq {
		ArticleId string `json:"article_id"` // 文章ID
		Verify    string `json:"verify"` // 验证信息
	}
	getHotTopicsReq {
		Page     int32 `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32 `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	GetArticleReq {
		ArticleId string `form:"article_id"` // 文章id
	}
	RecommendArticlesReq {
		Limit        int32  `form:"limit,default=10"` // 页码，默认值为 10
		PartitionsId string `form:"partitions_id,optional"`
		Tags         string `form:"tags,optional"`
	}
	GetFavoriteReq {
		Userid   string `form:"user_id"`
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	ActionArticleReq {
		ArticleId string `form:"article_id"`
		types     string `path:"types"`
		status    bool   `form:"status",optional,default=true"`
	}
	ReportArticleReq {
		ArticleId string `json:"article_id"`
		Describe  string `json:"describe",optional`
	}
	ShareArticleReq {
		ArticleId string `json:"article_id"`
	}
	GlobalSearchReq {
		Keyword  string `form:"keyword"`
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
		SortBy   string `form:"sort_by,optional"`
		Filter   string `form:"filter,optional"`
	}
	GetArticlesByUserReq {
		UserId   string `path:"user_id"`
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	ViewHistoryReq {
		Page     int32 `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32 `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	QueryPendingArticlesReq {
		Page     int32 `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32 `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	ReviewArticleReq {
		ArticleId   string `json:"article_id"`
		Approve     bool   `json:"approve"`
		Description string `json:"description,optional"`
	}
	QueryReviewArticlesReq {
		Page     int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
		Keyword  string `form:"keyword,optional"`
		Approve  bool   `form:"approve"` // 状态 通过/未通过
	}
)

@server (
	group:      article
	prefix:     /article
	middleware: Filter
)
service community {
	@doc "发布文章"
	@handler createArticle
	post /create (CreateArticleReq) returns (Response)

	@doc "编辑文章"
	@handler editArticle
	post /edit (EditArticleReq) returns (Response)

	@doc "保存草稿"
	@handler saveDraftArticle
	post /draft/save (CreateArticleReq) returns (Response)

	@doc "查看用户的草稿列表"
	@handler GetDraftArticles
	get /draft/list (GetDraftArticlesReq) returns (Response)

	@doc "删除文章"
	@handler deleteArticle
	post /delete (DeleteArticleReq) returns (Response)

	@doc "查询文章分区"
	@handler getPartitions
	get /partitions/query returns (Response)

	@doc "获取热门帖子"
	@handler getHotTopics
	get /topics/hot (getHotTopicsReq) returns (Response)

	@doc "查询文章"
	@handler getArticle
	get /get (GetArticleReq) returns (Response)

	@doc "推荐文章列表"
	@handler recommendArticles
	get /recommend (RecommendArticlesReq) returns (Response)

	@doc "获取用户收藏的文章"
	@handler GetFavorite
	get /favorite (GetFavoriteReq) returns (Response)

	@doc "举报文章"
	@handler ReportArticle
	post /report (ReportArticleReq) returns (Response)

	@doc "分享文章"
	@handler ShareArticle
	post /share (ShareArticleReq) returns (Response)

	@doc "全局搜索文章接口"
	@handler GlobalSearch
	get /search (GlobalSearchReq) returns (Response)

	@doc "编辑文章活动状态"
	@handler ActionArticle
	post /action/:types (ActionArticleReq) returns (Response)

	@doc "查看用户发布的文章列表"
	@handler GetArticlesByUser
	get /get/:user_id (GetArticlesByUserReq) returns (Response)

	@doc "查询历史记录"
	@handler ViewHistory
	get /history (ViewHistoryReq) returns (Response)

	@doc "查询待审核的文章列表"
	@handler QueryPendingArticles
	get /pending (QueryPendingArticlesReq) returns (Response)

	@doc "审核文章（通过/未通过）"
	@handler ReviewArticle
	get /reviewed/query (ReviewArticleReq) returns (Response)

	@doc "查询审核通过的文章列表"
	@handler QueryReviewArticles
	get /review/query (QueryReviewArticlesReq) returns (Response)
}

type (
	GetCommentListReq {
		ArticleId string `form:"article_id"`
		Page      int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize  int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	GetReplyCommentListReq {
		CommentId string `form:"comment_id"`
		Page      int32  `form:"page,default=1"` // 页码，默认值为 1
		PageSize  int32  `form:"page_size,default=10"` // 每页大小，默认值为 10
	}
	CreateCommentReq {
		ArticleId string `json:"article_id"`
		Content   string `json:"content"`
		Annex     string `json:"annex"`
	}
	ReplyCommentReq {
		ArticleId string `json:"article_id"`
		CommentId string `json:"comment_id"`
		Content   string `json:"content"`
		Annex     string `json:"annex"`
	}
	LikeCommentReq {
		ArticleId string `json:"article_id"`
		CommentId string `json:"comment_id"`
		Status    bool   `json:"status"`
	}
	CheckIsLikeCommentReq {
		CommentId string `form:"comment_id"`
	}
)

@server (
	group:      comment
	prefix:     /comment
	middleware: Filter
)
service community {
	@doc "获取楼主评论"
	@handler GetCommentList
	get /list (GetCommentListReq) returns (Response)

	@doc "获取回复评论"
	@handler GetReplyCommentList
	get /list/reply (GetReplyCommentListReq) returns (Response)

	@doc "发布评论信息"
	@handler CreateComment
	post /publish (CreateCommentReq) returns (Response)

	@doc "回复评论信息"
	@handler ReplyComment
	post /reply (ReplyCommentReq) returns (Response)

	@doc "点赞评论/或取消点赞"
	@handler LikeComment
	post /like (LikeCommentReq) returns (Response)

	@doc "检查用户是否对评论进行点赞"
	@handler CheckIsLikeComment
	get /like/check (CheckIsLikeCommentReq) returns (Response)
}

type (
	GetNotificationListReq {
		Page     int32 `form:"page,default=1"`
		PageSize int32 `form:"page_size,default=10"`
	}
	MarkNotificationAsReadReq {
		NotificationId string `json:"notification_id"`
	}
	DeleteNotificationReq {
		NotificationId string `json:"notification_id"`
	}
	PushNotificationReq {
		ReceiverId string `json:"receiver_id"`
		Message    string `json:"message"`
		IsRead     bool   `json:"is_read"`
		ExtraData  string `json:"extra_data"`
		Type       string `json:"type"`
	}
)

@server (
	group:      notification
	prefix:     /notification
	middleware: Filter
)
service community {
	@doc "获取用户的通知列表"
	@handler GetNotificationList
	get /list (GetNotificationListReq) returns (Response)

	@doc "标记通知为已读"
	@handler MarkNotificationAsRead
	post /mark/read (MarkNotificationAsReadReq) returns (Response)

	@doc "标记所有通知为已读"
	@handler MarkAllNotificationsAsRead
	post /mark/read/all returns (Response)

	@doc "删除通知"
	@handler DeleteNotification
	post /delete (DeleteNotificationReq) returns (Response)

	@doc "删除所有通知"
	@handler DeleteAllNotifications
	post /delete/all returns (Response)

	@doc "推送通知"
	@handler PushNotification
	post /push (PushNotificationReq) returns (Response)

	@doc "获取未读通知数量"
	@handler GetUnreadNotificationCount
	get /unread/count returns (Response)
}

